networks:
  blog:
    driver: bridge

volumes:
  postgres:
    driver: local
  pgadmin:
    driver: local

services:
  ## WEB SERVICE
  nginx:
    container_name: "${COMPOSE_PROJECT_NAME}-nginx"
    build:
      context: ./nginx
      args:
        - TZ=${TZ}
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ${LOG_PATH}/nginx:/var/log/nginx
      - ${SOURCE_CODE_PATH}:/var/dev
    ports:
      - "${NGINX_HOST_HTTP_PORT:-80}:80"
      - "${NGINX_HOST_HTTPS_PORT:-443}:443"
    environment:
      - BLOG_DOMAIN=${BLOG_DOMAIN}
      - BLOG_API_DOMAIN=${BLOG_API_DOMAIN}
      - BLOG_ADMIN_DOMAIN=${BLOG_ADMIN_DOMAIN}
      - BLOG_ADMIN_DIR=${BLOG_ADMIN_DIR}
      - NGINX_HOST_HTTP_PORT=${NGINX_HOST_HTTP_PORT:-80}
      - NGINX_HOST_HTTPS_PORT=${NGINX_HOST_HTTPS_PORT:-443}
    networks:
      - blog
    depends_on:
      - php83

  ## BACKEND SERVICES
  php83:
    container_name: "${COMPOSE_PROJECT_NAME:-blog}-php83"
    build:
      context: php83
      args:
        - TZ=${TZ}
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    networks:
      - blog
    volumes:
      - ${SOURCE_CODE_PATH}:/var/dev
    environment:
      - BLOG_DOMAIN=${BLOG_DOMAIN}
      - BLOG_API_DOMAIN=${BLOG_API_DOMAIN}
      - BLOG_ADMIN_DOMAIN=${BLOG_ADMIN_DOMAIN}
      - BLOG_ADMIN_DIR=${BLOG_ADMIN_DIR}

  ## FRONTEND SERVICES
  node:
    container_name: "${COMPOSE_PROJECT_NAME:-blog}-node"
    build:
      context: node
      args:
        - TZ=${TZ}
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    networks:
      - blog
    volumes:
      - ${SOURCE_CODE_PATH}:/var/dev
    environment:
      - BLOG_DOMAIN=${BLOG_DOMAIN}
      - BLOG_API_DOMAIN=${BLOG_API_DOMAIN}
      - BLOG_ADMIN_DOMAIN=${BLOG_ADMIN_DOMAIN}
      - BLOG_ADMIN_DIR=${BLOG_ADMIN_DIR}

  ## DATABASE SERVICES
  postgres:
    container_name: "${COMPOSE_PROJECT_NAME:-blog}-postgres"
    build:
      context: ./postgres
      args:
        - TZ=${TZ}
    networks:
      - blog
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres/entry.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"

  ## DATABASE ADMINISTRATION
  pgadmin:
    container_name: "${COMPOSE_PROJECT_NAME:-blog}-pgadmin"
    image: dpage/pgadmin4
    networks:
      - blog
    ports:
      - "${PGADMIN_HOST_PORT:-5050}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_SETUP_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_SETUP_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin:/var/lib/pgadmin
